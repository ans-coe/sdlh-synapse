{
	"name": "nb_util_sql_query_py",
	"properties": {
		"folder": {
			"name": "utils"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "dcfed696-5550-4d2a-993c-024adce79b27"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## SDLH (Strategic Data Lakehouse) Utility\n",
					"<p><b>Description: </b>Enter notebook decription</p>\n",
					"<b>Parent Process: </b>SDLH Pipelines</p>\n",
					"<table align=\"left\">\n",
					" <thead>\n",
					"  <tr>\n",
					"   <th>Contributor</th>\n",
					"   <th>Date</th>\n",
					"   <th>Version</th>\n",
					"   <th>Comment</th>\n",
					"   <th>WorkItem No</th>\n",
					"  </tr>\n",
					" </thead>\n",
					" <tbody>\n",
					"  <tr>\n",
					"   <td>Andrei Dumitru</td>\n",
					"   <td>2022-12-09</td>\n",
					"   <td>1.0</td>\n",
					"   <td>Create initial release</td>\n",
					"   <td></td>\n",
					"  </tr>\n",
					"  <tr>\n",
					"   <td>Darren Price</td>\n",
					"   <td>2023-10-23</td>\n",
					"   <td>2.0</td>\n",
					"   <td>Updated for SDLH v2.0</td>\n",
					"   <td></td>\n",
					"  </tr>\n",
					"  <tr>\n",
					"   <td>Darren Price</td>\n",
					"   <td>2024-01-09</td>\n",
					"   <td>2.1</td>\n",
					"   <td>Updated for SDLH v2.1</td>\n",
					"   <td></td>\n",
					"  <tr>\n",
					"   <td>Darren Price</td>\n",
					"   <td>2024-03-08</td>\n",
					"   <td>2.2.0</td>\n",
					"   <td>Updated for SDLH v2.2.0</td>\n",
					"   <td></td>\n",
					"  </tr>\n",
					"  <tr>\n",
					"   <td>Andrei Dumitru</td>\n",
					"   <td>2024-03-18</td>\n",
					"   <td>2.2.2</td>\n",
					"   <td>Updated for SDLH v2.2.2</td>\n",
					"   <td></td>\n",
					"  </tr>\n",
					"  <tr>\n",
					"   <td>Darren Price</td>\n",
					"   <td>2024-05-07</td>\n",
					"   <td>2.2.3</td>\n",
					"   <td>Removed lower() from column name <br> Added data type swap for datetimeoffset to datetime2<br> Column INFO schema removed reference to IS_NULLABLE</td>\n",
					"   <td></td>\n",
					"  </tr>\n",
					"  <tr>\n",
					"   <td>Darren Price</td>\n",
					"   <td>2024-07-24</td>\n",
					"   <td>2.2.14</td>\n",
					"   <td>Updated create lakhouse database to use UTF8 collation</td>\n",
					"   <td></td>\n",
					"  </tr>\n",
					"  <tr>\n",
					"   <td>Andrei Dumitru</td>\n",
					"   <td>2024-08-16</td>\n",
					"   <td>2.2.15</td>\n",
					"   <td>Updated the create_external_table to commit after each query <br>instead of \"d.autocommit=True\", making it compatible with both<br> Spark 3.3 and 3.4.<br> The notebook is now compatible with Spark 3.4 on Synapse. </td>\n",
					"   <td></td>\n",
					"  </tr>\n",
					"  <tr>\n",
					"   <td>Andrei Dumitru</td>\n",
					"   <td>2024-09-09</td>\n",
					"   <td>2.2.15</td>\n",
					"   <td>Changed the data lakehouse datatype mapping for timestamp to varbinary(8).</td>\n",
					"   <td></td>\n",
					"  </tr>\n",
					"  <tr>\n",
					"   <td>Andrei Dumitru</td>\n",
					"   <td>2024-10-01</td>\n",
					"   <td>2.2.15</td>\n",
					"   <td>Modified the datatype mapping for timestamp to varbinary(8) but ONLY for SQL SERVER data sources. <br>Postgres and MySQL data sources map to datetime2. <br>Mapped character lengths >= 1000 for nvarchar data types to be mapped to double the original length and varchar data type. </td>\n",
					"   <td></td>\n",
					"  </tr>\n",
					"  <tr>\n",
					"   <td>Andrei Dumitru</td>\n",
					"   <td>2024-10-02</td>\n",
					"   <td>2.2.16</td>\n",
					"   <td>Fixed the mapping data types function. </td>\n",
					"   <td></td>\n",
					"  </tr>\n",
					"  <tr>\n",
					"   <td>Andrei Dumitru</td>\n",
					"   <td>2024-10-03</td>\n",
					"   <td>2.2.17</td>\n",
					"   <td>Changed the Serverless SQL collation to Latin1_General_100_CI_AS_SC_UTF8 which is case insensitive.</td>\n",
					"   <td></td>\n",
					"  </tr>\n",
					"  <tr>\n",
					"   <td>Darren Price</td>\n",
					"   <td>2024-10-11</td>\n",
					"   <td>2.3.0</td>\n",
					"   <td>Updated notebook with 4 new parameters to support: <p>(a) Capibility to support different datalake container names.<p>(b) Capibility to support recreating external tables.\n",
					"   <td></td>\n",
					"  </tr>\n",
					"  <tr>\n",
					"   <td>Andrei Dumitru</td>\n",
					"   <td>2024-12-11</td>\n",
					"   <td>2.3.9</td>\n",
					"   <td>Added a function to create external tables if the schema needs to be extracted straight from Delta files.<p> It also has the option to re-create or not the external table.\n",
					"   <td></td>\n",
					"  </tr>\n",
					"  <tr>\n",
					"   <td>Tom Legge</td>\n",
					"   <td>2025-02-04</td>\n",
					"   <td>2.3.10</td>\n",
					"   <td>Added a new data type to the mapping function 'sql_variant'.\n",
					"   <td></td>\n",
					"  </tr>\n",
					"    <tr>\n",
					"   <td>Tom Legge</td>\n",
					"   <td>2025-02-14</td>\n",
					"   <td>2.3.11</td>\n",
					"   <td>Updated mapping so that Azure_MI timestamp is also mapped to varbinary(8).\n",
					"   <td></td>\n",
					"  </tr>\n",
					"    </tr>\n",
					"    <tr>\n",
					"   <td>Tom Legge</td>\n",
					"   <td>2025-03-21</td>\n",
					"   <td>2.3.12</td>\n",
					"   <td>Updated mapping so that longtext is mapped to varchar(max).\n",
					"   <td></td>\n",
					"  </tr>\n",
					" </tbody>\n",
					"</table>\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def create_serverless_databases_and_schemas(odbc_url:str, odbc_token:str, datalake_name: str, datalake_container_raw: str, datalake_container_enriched: str, datalake_container_curated: str) ->str:\n",
					"    \"\"\"\n",
					"    Uses a batch of metadata from the Metadata DB. It works out the unique Serverless SQL DB names and Schema names that need creating. It then \n",
					"    creates the following external tables pre-requisites if they don't exist already:\n",
					"        - Serverless SQL Database/s\n",
					"        - Serverless SQL Schema/s\n",
					"        - Master Key Encryption\n",
					"        - Database Scoped Credential\n",
					"        - Enriched External Data Source\n",
					"        - Delimited, Parquet, Delta External File Formats\n",
					" \n",
					"    Args:\n",
					"        odbc_url (str): The Serverless SQL Pool ODBC connection details.\n",
					"        odbc_token (str): The Serverless SQL Pool ODBC connection credentials.\n",
					"        datalake_name (str): The name of the data lake to use.\n",
					"        datalake_container_raw (str): The name of the raw container to use.\n",
					"        datalake_container_enriched (str): The name of the enriched container to use.\n",
					"        datalake_container_curated (str): The name of the curated container to use.\n",
					"\n",
					"    Returns:\n",
					"        str: Returns the External data source name created.\n",
					"    \"\"\"\n",
					"    ## Extract metadata \n",
					"    serverless_databases_to_create = (df_objects_metadata_extracted\n",
					"                                    .select(\"SERVERLESS_SQL_POOL_DATABASE\", \"SERVERLESS_SQL_POOL_SCHEMA\").distinct()\n",
					"                                    .groupBy(\"SERVERLESS_SQL_POOL_DATABASE\")\n",
					"                                    .agg(collect_list(\"SERVERLESS_SQL_POOL_SCHEMA\").alias(\"SERVERLESS_SQL_POOL_SCHEMA_LIST\"))\n",
					"                                    .rdd\n",
					"                                    .map(lambda row: (row[0], row[1]))\n",
					"                                    .collectAsMap())\n",
					"\n",
					"    d = pyodbc.connect(odbc_url, attrs_before = { SQL_COPT_SS_ACCESS_TOKEN:odbc_token })\n",
					"    d.autocommit = True\n",
					"    cursor = d.cursor()\n",
					"\n",
					"    for serverless_sql_pool_database in serverless_databases_to_create.keys():\n",
					"        create_database = f'''\n",
					"            IF NOT EXISTS (SELECT [name] FROM sys.databases WHERE [name] = '{serverless_sql_pool_database}')\n",
					"            BEGIN\n",
					"                EXEC('CREATE DATABASE [{serverless_sql_pool_database}] COLLATE Latin1_General_100_CI_AS_SC_UTF8;')\n",
					"            END;\n",
					"        '''\n",
					"\n",
					"        print('Database created: ', serverless_sql_pool_database)\n",
					"        cursor.execute(create_database)\n",
					"        serverless_sql_pool_schemas = serverless_databases_to_create.values()\n",
					"\n",
					"        for serverless_sql_pool_schema in serverless_databases_to_create[serverless_sql_pool_database]:\n",
					"            create_schema = f'''\n",
					"                USE [{serverless_sql_pool_database}];\n",
					"                IF NOT EXISTS (SELECT [name] FROM sys.schemas WHERE [name] = '{serverless_sql_pool_schema}')\n",
					"                BEGIN\n",
					"                    EXEC('CREATE SCHEMA [{serverless_sql_pool_schema}]')\n",
					"                END\n",
					"            '''\n",
					"            #print(create_schema)\n",
					"            print(\"Schema created: \", serverless_sql_pool_schema)\n",
					"            cursor.execute(create_schema)\n",
					"    \n",
					"        create_credential = f'''\n",
					"            USE [{serverless_sql_pool_database}];\n",
					"            IF NOT EXISTS (SELECT symmetric_key_id FROM sys.symmetric_keys WHERE symmetric_key_id = 101)\n",
					"            BEGIN\n",
					"                CREATE MASTER KEY\n",
					"            END;\n",
					"            IF NOT EXISTS (SELECT [name] from sys.database_scoped_credentials WHERE [name] = 'cred_managed_identity')\n",
					"            BEGIN\n",
					"                CREATE DATABASE SCOPED CREDENTIAL [cred_managed_identity]\n",
					"                WITH IDENTITY = 'MANAGED IDENTITY'\n",
					"            END;\n",
					"        '''\n",
					"        cursor.execute(create_credential)\n",
					"\n",
					"     \n",
					"        external_data_source_raw = f'exds_gen2_{datalake_container_raw}'\n",
					"        external_data_source_enriched = f'exds_gen2_{datalake_container_enriched}'\n",
					"        external_data_source_curated = f'exds_gen2_{datalake_container_curated}'\n",
					"        external_data_source_metadata = f'exds_gen2_metadata'\n",
					"\n",
					"        create_exds = f'''\n",
					"            IF NOT EXISTS (SELECT [name] FROM sys.external_data_sources WHERE [name] = '{external_data_source_raw}')\n",
					"            BEGIN\n",
					"                CREATE EXTERNAL DATA SOURCE [{external_data_source_raw}]\n",
					"                WITH (\n",
					"                    LOCATION = N'https://{datalake_name}.dfs.core.windows.net/{datalake_container_raw}',\n",
					"                    CREDENTIAL = [cred_managed_identity]\n",
					"                );\n",
					"            END;\n",
					"\n",
					"            IF NOT EXISTS (SELECT [name] FROM sys.external_data_sources WHERE [name] = '{external_data_source_enriched}')\n",
					"            BEGIN\n",
					"                CREATE EXTERNAL DATA SOURCE [{external_data_source_enriched}]\n",
					"                WITH (\n",
					"                    LOCATION = N'https://{datalake_name}.dfs.core.windows.net/{datalake_container_enriched}',\n",
					"                    CREDENTIAL = [cred_managed_identity]\n",
					"                );\n",
					"            END;\n",
					"\n",
					"            IF NOT EXISTS (SELECT [name] FROM sys.external_data_sources WHERE [name] = '{external_data_source_curated}')\n",
					"            BEGIN\n",
					"                CREATE EXTERNAL DATA SOURCE [{external_data_source_curated}]\n",
					"                WITH (\n",
					"                    LOCATION = N'https://{datalake_name}.dfs.core.windows.net/{datalake_container_curated}',\n",
					"                    CREDENTIAL = [cred_managed_identity]\n",
					"                );\n",
					"            END;\n",
					"\n",
					"            IF NOT EXISTS (SELECT [name] FROM sys.external_data_sources WHERE [name] = '{external_data_source_metadata}')\n",
					"            BEGIN\n",
					"                CREATE EXTERNAL DATA SOURCE [{external_data_source_metadata}]\n",
					"                WITH (\n",
					"                    LOCATION = N'https://{datalake_name}.dfs.core.windows.net/metadata',\n",
					"                    CREDENTIAL = [cred_managed_identity]\n",
					"                );\n",
					"            END;\n",
					"\n",
					"            IF NOT EXISTS (SELECT [name] FROM sys.external_file_formats WHERE [name] = 'exff_csv')\n",
					"            BEGIN\n",
					"                CREATE EXTERNAL FILE FORMAT exff_csv\n",
					"                WITH (\n",
					"                    FORMAT_TYPE = DELIMITEDTEXT,\n",
					"                    FORMAT_OPTIONS (FIELD_TERMINATOR = ','),\n",
					"                    DATA_COMPRESSION = 'org.apache.hadoop.io.compress.GzipCodec'\n",
					"                );\n",
					"            END;\n",
					"            IF NOT EXISTS (SELECT [name] FROM sys.external_file_formats WHERE [name] = 'exff_parquet')\n",
					"            BEGIN\n",
					"                CREATE EXTERNAL FILE FORMAT exff_parquet\n",
					"                WITH (\n",
					"                    FORMAT_TYPE = PARQUET,\n",
					"                    DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n",
					"                );\n",
					"            END;\n",
					"            IF NOT EXISTS (SELECT [name] FROM sys.external_file_formats WHERE [name] = 'exff_delta')\n",
					"            BEGIN\n",
					"                CREATE EXTERNAL FILE FORMAT exff_delta\n",
					"                WITH (\n",
					"                    FORMAT_TYPE = DELTA\n",
					"                );\n",
					"            END;\n",
					"        '''\n",
					"        cursor.execute(create_exds)\n",
					"        d.close()\n",
					"    return"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def map_data_types(df: pyspark.sql.dataframe.DataFrame) -> pyspark.sql.dataframe.DataFrame:\n",
					"    \"\"\"\n",
					"    Takes in the information schema dataframe extracted from Metadata DB. It maps data types from\n",
					"    source systems to datatypes supported in Serverless SQL Pool and makes formatting changes \n",
					"    to column data types and maximum length in a PySpark DataFrame. \n",
					"\n",
					"    The function performs the following transformations:\n",
					"        - Maps data types based on a dictionary of mappings\n",
					"        - Replaces spaces in column names with underscores\n",
					"        - Changes the maximum length of columns with a length of \"-1\" to \"4000\"\n",
					"        - Replaces \"varchar(4000)\" data type with \"varchar\"\n",
					"        - Adds brackets to column names to make them SQL-safe\n",
					"\n",
					"    Returns an information_schema dataframe suitable for Serverless SQL Pool external tables creation. \n",
					"\n",
					"    Parameters:\n",
					"    - df: PySpark DataFrame - the input DataFrame to be transformed\n",
					"\n",
					"    Returns:\n",
					"    - PySpark DataFrame - the transformed DataFrame\n",
					"\n",
					"    Example Usage:\n",
					"    ```\n",
					"    from pyspark.sql import SparkSession\n",
					"    spark = SparkSession.builder.appName(\"MapDataTypes\").getOrCreate()\n",
					"\n",
					"    transformed_df = map_data_types(df) \n",
					"    ```\n",
					"    \"\"\"\n",
					"    # Dictionary to map source data types to target data types\n",
					"    data_type_mappings = {\n",
					"        \"nvarchar\": \"varchar\",\n",
					"        \"nchar\": \"char\",\n",
					"        \"ntext\": \"varchar\",\n",
					"        \"text\": \"varchar\",\n",
					"        \"character varying\": \"varchar\",\n",
					"        \"geography\": \"varbinary\",\n",
					"        \"geometry\": \"varbinary\",\n",
					"        \"hierarchyid\": \"nvarchar(4000)\",\n",
					"        \"image\": \"varbinary(4000)\",\n",
					"        \"rowversion\": \"varbinary(8)\",\n",
					"        \"xml\": \"varchar\",\n",
					"        \"double\": \"varchar(8000)\",\n",
					"        \"integer\": \"int\",\n",
					"        \"boolean\": \"bit\",\n",
					"        \"timestamp without time zone\": \"datetime2\",\n",
					"        \"timestamp with time zone\": \"datetime2\",\n",
					"        \"timestamp\": \"datetime2\",\n",
					"        \"datetimeoffset\": \"datetime2\",\n",
					"        \"ARRAY\": \"varchar(max)\",\n",
					"        \"numeric\": \"varchar(8000)\",\n",
					"        \"json\": \"varchar(max)\",\n",
					"        \"tinytext\": \"varchar\",\n",
					"        \"sql_variant\": \"varchar(8000)\"\n",
					"    }\n",
					"\n",
					"    # UDF to map data types using the dictionary\n",
					"    map_data_type_udf = udf(lambda data_type: data_type_mappings.get(data_type, data_type), StringType())\n",
					"\n",
					"    # Change 'timestamp' data type to 'varbinary(8)' for SQL Server source\n",
					"    df = df.withColumn(\"DATA_TYPE\", when(((col(\"SOURCE_TYPE\") == \"SQL_SERVER\") | (col(\"SOURCE_TYPE\") == \"AZURE_SQL_MI\")) & (col(\"DATA_TYPE\") == \"timestamp\"),\"varbinary(8)\").otherwise(df[\"DATA_TYPE\"]))\n",
					"\n",
					"    # Double the length of 'nvarchar' columns if length is >= 1\n",
					"    df = df.withColumn(\"CHARACTER_MAXIMUM_LENGTH\", when((col(\"CHARACTER_MAXIMUM_LENGTH\").cast(\"bigint\") >= 1) & (col(\"DATA_TYPE\") == \"nvarchar\"), (col(\"CHARACTER_MAXIMUM_LENGTH\") * 2).cast(\"string\")).otherwise(df[\"CHARACTER_MAXIMUM_LENGTH\"]))\n",
					"\n",
					"    # Apply data type mappings\n",
					"    df = df.withColumn(\"DATA_TYPE\", map_data_type_udf(col(\"DATA_TYPE\")))\n",
					"\n",
					"\n",
					"    # Change length of columns with length '-1' to 'MAX'\n",
					"    df = df.withColumn(\"CHARACTER_MAXIMUM_LENGTH\", when(df[\"CHARACTER_MAXIMUM_LENGTH\"] == \"-1\", \"MAX\").otherwise(df[\"CHARACTER_MAXIMUM_LENGTH\"]))\n",
					"\n",
					"    # Replace mySQL longtext to varchar(max)\n",
					"    df = df.withColumn(\"CHARACTER_MAXIMUM_LENGTH\", when((col(\"SOURCE_TYPE\") == \"MY_SQL\") & (col(\"DATA_TYPE\") == \"longtext\"),\"MAX\").otherwise(df[\"CHARACTER_MAXIMUM_LENGTH\"]))\n",
					"    df = df.withColumn(\"DATA_TYPE\", when((col(\"SOURCE_TYPE\") == \"MY_SQL\") & (col(\"DATA_TYPE\") == \"longtext\"),\"varchar\").otherwise(df[\"DATA_TYPE\"]))\n",
					"\n",
					"    # Replace mySQL mediumtext to varchar(max)\n",
					"    df = df.withColumn(\"CHARACTER_MAXIMUM_LENGTH\", when((col(\"SOURCE_TYPE\") == \"MY_SQL\") & (col(\"DATA_TYPE\") == \"mediumtext\"),\"MAX\").otherwise(df[\"CHARACTER_MAXIMUM_LENGTH\"]))\n",
					"    df = df.withColumn(\"DATA_TYPE\", when((col(\"SOURCE_TYPE\") == \"MY_SQL\") & (col(\"DATA_TYPE\") == \"mediumtext\"),\"varchar\").otherwise(df[\"DATA_TYPE\"]))\n",
					"\n",
					"    # Replace mySQL SET to varchar(max)\n",
					"    df = df.withColumn(\"CHARACTER_MAXIMUM_LENGTH\", when((col(\"SOURCE_TYPE\") == \"MY_SQL\") & (col(\"DATA_TYPE\") == \"set\"),\"MAX\").otherwise(df[\"CHARACTER_MAXIMUM_LENGTH\"]))\n",
					"    df = df.withColumn(\"DATA_TYPE\", when((col(\"SOURCE_TYPE\") == \"MY_SQL\") & (col(\"DATA_TYPE\") == \"set\"),\"varchar\").otherwise(df[\"DATA_TYPE\"]))\n",
					"\n",
					"    # Replace mySQL mediumint to bitint\n",
					"    df = df.withColumn(\"DATA_TYPE\", when((col(\"SOURCE_TYPE\") == \"MY_SQL\") & (col(\"DATA_TYPE\") == \"mediumint\"),\"bigint\").otherwise(df[\"DATA_TYPE\"]))\n",
					"\n",
					"    # Replace mySQL tinyblob to varchar(n)\n",
					"    df = df.withColumn(\"DATA_TYPE\", when((col(\"SOURCE_TYPE\") == \"MY_SQL\") & (col(\"DATA_TYPE\") == \"tinyblob\"),\"varchar\").otherwise(df[\"DATA_TYPE\"]))\n",
					"\n",
					"    # Replace mySQL year to smallint\n",
					"    df = df.withColumn(\"DATA_TYPE\", when((col(\"SOURCE_TYPE\") == \"MY_SQL\") & (col(\"DATA_TYPE\") == \"year\"),\"smallint\").otherwise(df[\"DATA_TYPE\"]))\n",
					"\n",
					"    # Replace mySQL blob to varchar(max)\n",
					"    df = df.withColumn(\"CHARACTER_MAXIMUM_LENGTH\", when((col(\"SOURCE_TYPE\") == \"MY_SQL\") & (col(\"DATA_TYPE\") == \"blob\"),\"MAX\").otherwise(df[\"CHARACTER_MAXIMUM_LENGTH\"]))\n",
					"    df = df.withColumn(\"DATA_TYPE\", when((col(\"SOURCE_TYPE\") == \"MY_SQL\") & (col(\"DATA_TYPE\") == \"blob\"),\"varchar\").otherwise(df[\"DATA_TYPE\"]))\n",
					"\n",
					"    # Replace mySQL longblob to varchar(max)\n",
					"    df = df.withColumn(\"CHARACTER_MAXIMUM_LENGTH\", when((col(\"SOURCE_TYPE\") == \"MY_SQL\") & (col(\"DATA_TYPE\") == \"longblob\"),\"MAX\").otherwise(df[\"CHARACTER_MAXIMUM_LENGTH\"]))\n",
					"    df = df.withColumn(\"DATA_TYPE\", when((col(\"SOURCE_TYPE\") == \"MY_SQL\") & (col(\"DATA_TYPE\") == \"longblob\"),\"varchar\").otherwise(df[\"DATA_TYPE\"]))\n",
					"\n",
					"    # Replace mySQL mediumblob to varchar(max)\n",
					"    df = df.withColumn(\"CHARACTER_MAXIMUM_LENGTH\", when((col(\"SOURCE_TYPE\") == \"MY_SQL\") & (col(\"DATA_TYPE\") == \"mediumblob\"),\"MAX\").otherwise(df[\"CHARACTER_MAXIMUM_LENGTH\"]))\n",
					"    df = df.withColumn(\"DATA_TYPE\", when((col(\"SOURCE_TYPE\") == \"MY_SQL\") & (col(\"DATA_TYPE\") == \"mediumblob\"),\"varchar\").otherwise(df[\"DATA_TYPE\"]))\n",
					"\n",
					"    # Replace mySQL enum to varchar(max)\n",
					"    df = df.withColumn(\"CHARACTER_MAXIMUM_LENGTH\", when((col(\"SOURCE_TYPE\") == \"MY_SQL\") & (col(\"DATA_TYPE\") == \"enum\"),\"MAX\").otherwise(df[\"CHARACTER_MAXIMUM_LENGTH\"]))\n",
					"    df = df.withColumn(\"DATA_TYPE\", when((col(\"SOURCE_TYPE\") == \"MY_SQL\") & (col(\"DATA_TYPE\") == \"enum\"),\"varchar\").otherwise(df[\"DATA_TYPE\"]))\n",
					"\n",
					"    # Replace mySQL bit to numeric(38,2)\n",
					"    df = df.withColumn(\"DATA_TYPE\", when((col(\"SOURCE_TYPE\") == \"MY_SQL\") & (col(\"DATA_TYPE\") == \"bit\"),\"decimal(38,0)\").otherwise(df[\"DATA_TYPE\"]))\n",
					"\n",
					"    # Replace 'null' length with '8000'\n",
					"    df = df.withColumn(\"CHARACTER_MAXIMUM_LENGTH\", when(df[\"CHARACTER_MAXIMUM_LENGTH\"] == \"null\", \"8000\").otherwise(df[\"CHARACTER_MAXIMUM_LENGTH\"]))\n",
					"\n",
					"    # Remove special characters from length values\n",
					"    df = df.withColumn(\"CHARACTER_MAXIMUM_LENGTH\", F.regexp_replace(col(\"CHARACTER_MAXIMUM_LENGTH\"), \"[\\$#,]\", \"\"))\n",
					"\n",
					"    # Change length of columns with length '-4000' to '8000'\n",
					"    df = df.withColumn(\"CHARACTER_MAXIMUM_LENGTH\", when(df[\"CHARACTER_MAXIMUM_LENGTH\"] == \"-4000\", \"8000\").otherwise(df[\"CHARACTER_MAXIMUM_LENGTH\"]))\n",
					"\n",
					"    # Change length of columns with length >= 4000 to '8000'\n",
					"    df = df.withColumn(\"CHARACTER_MAXIMUM_LENGTH\", when(col(\"CHARACTER_MAXIMUM_LENGTH\").cast(\"bigint\") >= 4000, \"8000\").otherwise(df[\"CHARACTER_MAXIMUM_LENGTH\"]))\n",
					"\n",
					"    # Replace 'varchar(4000)' data type with 'varchar'\n",
					"    df = df.withColumn(\"DATA_TYPE\", when(df[\"DATA_TYPE\"] == \"varchar(4000)\", \"varchar\").otherwise(df[\"DATA_TYPE\"]))\n",
					"\n",
					"    # Set 'varchar' data type to 'varchar(8000)' if length is null\n",
					"    df = df.withColumn(\"DATA_TYPE\", when((col(\"DATA_TYPE\") == \"varchar\") & (col(\"CHARACTER_MAXIMUM_LENGTH\").isNull()), \"varchar(8000)\").otherwise(df[\"DATA_TYPE\"]))\n",
					"\n",
					"    # Trim leading and trailing spaces from column names\n",
					"    df = df.withColumn(\"COLUMN_NAME\", ltrim(col(\"COLUMN_NAME\")))\n",
					"    df = df.withColumn(\"COLUMN_NAME\", rtrim(col(\"COLUMN_NAME\")))\n",
					"\n",
					"    # Replace spaces in column names with underscores\n",
					"    df = df.withColumn(\"COLUMN_NAME\", regexp_replace(col(\"COLUMN_NAME\"), \" \", \"_\"))\n",
					"\n",
					"    # Replace special characters in column names with underscores\n",
					"    df = df.withColumn(\"COLUMN_NAME\", regexp_replace(col(\"COLUMN_NAME\"), f\"\"\"[,;{{}}()=]\"\"\", \"_\"))\n",
					"\n",
					"    # Wrap  CHARACTER_MAXIMUM_LENGTH in brackets \"()\"\n",
					"    df = df.withColumn(\"CHARACTER_MAXIMUM_LENGTH\", concat(lit(\"(\"), col(\"CHARACTER_MAXIMUM_LENGTH\"), lit(\")\")))\n",
					"\n",
					"    # Wrap COLUMN_NAME in square brackets \"[]\"\n",
					"    df = df.withColumn(\"COLUMN_NAME\", concat(lit(\"[\"), col(\"COLUMN_NAME\"), lit(\"]\")))\n",
					"\n",
					"    return df"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def ext_table_mapping(tables_list:list, information_schemas:pyspark.sql.dataframe.DataFrame, staged_instructions:dict, datalake_enchiched_container:str) -> dict:\n",
					"    '''\n",
					"    This function uses the information_schema to create a dictionary with all the information required for \n",
					"    Serverless SQL Pool external tables creation.\n",
					"\n",
					"    Args:\n",
					"    tables_list (list): List of tables\n",
					"    information_schemas (DataFrame): DataFrame containing schema information\n",
					"    staged_instructions (dict): Dictionary containing staged instructions\n",
					"    datalake_enchiched_container (str): Name of the datalake staged container\n",
					"\n",
					"    Returns:\n",
					"    external_tables_instructions (dict): Dictionary with the following structure:\n",
					"        {'table_name': {'TABLE_QUERY': 'columns_query', 'FILE_PATH': 'staged_file_path',\n",
					"                        'SERVERLESS_SQL_POOL_DATABASE': 'database_name', 'SERVERLESS_SQL_SCHEMA': 'schema',\n",
					"                        'EXTERNAL_DATA_SOURCE': 'exds_gen2_datalake_enchiched_container'}}\n",
					"    '''\n",
					"\n",
					"    # Define empty dictionary to populate\n",
					"    external_tables_instructions ={}\n",
					"\n",
					"    # Loop through the list of tables\n",
					"    for table in tables_list:\n",
					"        \n",
					"        # Use information_schemas dataframe (which contains column-level info) to start composing the query, specifically the data type part.\n",
					"        if information_schemas.select(\"CHARACTER_MAXIMUM_LENGTH\") == \"undefined\":\n",
					"            query = information_schemas.select(concat_ws(\" \", information_schemas.COLUMN_NAME, information_schemas.DATA_TYPE).alias(\"QUERY\"), information_schemas.TABLE_NAME.alias(\"TABLE_NAME\"), information_schemas.COLUMN_NAME.alias(\"COLUMN_NAME\"))\n",
					"        elif information_schemas.select(\"CHARACTER_MAXIMUM_LENGTH\") != \"undefined\":\n",
					"            query = information_schemas.select(concat_ws(\" \", information_schemas.COLUMN_NAME, information_schemas.DATA_TYPE, information_schemas.CHARACTER_MAXIMUM_LENGTH).alias(\"QUERY\"), information_schemas.TABLE_NAME.alias(\"TABLE_NAME\"),information_schemas.COLUMN_NAME.alias(\"COLUMN_NAME\"))\n",
					"        \n",
					"        # Aggregate, comma-separate, and concatenate all column info per table\n",
					"        query = query.groupby(\"TABLE_NAME\").agg(collect_list(\"QUERY\").alias(\"QUERY\"))\n",
					"        query_string = query.withColumn(\"QUERY\", concat_ws(\", \", \"QUERY\"))\n",
					"\n",
					"        # Extract info about each external table\n",
					"        database = staged_instructions[table][\"SERVERLESS_SQL_POOL_DATABASE\"]\n",
					"        schema = staged_instructions[table][\"SERVERLESS_SQL_POOL_SCHEMA\"]\n",
					"        \n",
					"        file_path = f\"{staged_instructions[table]['SERVERLESS_SQL_POOL_DATABASE']}/{staged_instructions[table]['SERVERLESS_SQL_POOL_SCHEMA']}/{staged_instructions[table]['TABLE_NAME']}\"\n",
					"        external_tables_instructions.update({f'{staged_instructions[table][\"TABLE_NAME\"]}': {\"TABLE_QUERY\" : f'placeholder' , \"FILE_PATH\":f'{file_path}' , \"SERVERLESS_SQL_POOL_DATABASE\":staged_instructions[table][\"SERVERLESS_SQL_POOL_DATABASE\"], \"SERVERLESS_SQL_SCHEMA\":staged_instructions[table][\"SERVERLESS_SQL_POOL_SCHEMA\"], \"EXTERNAL_DATA_SOURCE\":f'exds_gen2_{datalake_enchiched_container}'}})\n",
					"\n",
					"    for row in query_string.toLocalIterator():\n",
					"        external_tables_instructions[row.TABLE_NAME][\"TABLE_QUERY\"] = row.QUERY\n",
					"\n",
					"    return external_tables_instructions"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def ext_table_mapping_underlying_file(tables_list:list, staged_instructions:dict, datalake_enchiched_container:str) -> dict:\n",
					"    '''\n",
					"    This function creates the information required for Serverless SQL Pool external tables creation from the underlying file schema.\n",
					"\n",
					"    Args:\n",
					"    tables_list (list): List of tables\n",
					"    staged_instructions (dict): Dictionary containing staged instructions\n",
					"    datalake_enchiched_container (str): Name of the datalake staged container\n",
					"\n",
					"    Returns:\n",
					"    external_tables_instructions (dict): Dictionary with the following structure:\n",
					"        {'table_name': {'FILE_PATH': 'staged_file_path',\n",
					"                        'SERVERLESS_SQL_POOL_DATABASE': 'database_name', 'SERVERLESS_SQL_SCHEMA': 'schema',\n",
					"                        'EXTERNAL_DATA_SOURCE': 'exds_gen2_datalake_enchiched_container'}}\n",
					"    '''\n",
					"    # Define empty dictionary to populate\n",
					"    external_tables_instructions ={}\n",
					"\n",
					"    # Loop through the list of tables\n",
					"    for table in tables_list:\n",
					"        # Extract info about each external table\n",
					"        database = staged_instructions[table][\"SERVERLESS_SQL_POOL_DATABASE\"]\n",
					"        schema = staged_instructions[table][\"SERVERLESS_SQL_POOL_SCHEMA\"]\n",
					"        \n",
					"        file_path = f\"{staged_instructions[table]['SERVERLESS_SQL_POOL_DATABASE']}/{staged_instructions[table]['SERVERLESS_SQL_POOL_SCHEMA']}/{staged_instructions[table]['TABLE_NAME']}\"\n",
					"        external_tables_instructions.update({f'{staged_instructions[table][\"TABLE_NAME\"]}': {\"FILE_PATH\":f'{file_path}' , \"SERVERLESS_SQL_POOL_DATABASE\":staged_instructions[table][\"SERVERLESS_SQL_POOL_DATABASE\"], \"SERVERLESS_SQL_SCHEMA\":staged_instructions[table][\"SERVERLESS_SQL_POOL_SCHEMA\"], \"EXTERNAL_DATA_SOURCE\":f'exds_gen2_{datalake_enchiched_container}'}})\n",
					"\n",
					"\n",
					"    return external_tables_instructions"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Creates the external table T-SQL definition\n",
					"# Can return 2 different option depening if bollean flag recreate_external_tables is True or not\n",
					"# If recreate_external_tables is coming in as True external tables are dropped and created again\n",
					"# Ability to recreate externals tables is use full for when schema changes or database default collation is changed \n",
					"def produce_external_table_definition(recreate_external_tables:bool, database_name:str, schema_name: str, table_name: str, file_system: str, data_source: str, location: str, columns_meta: str) -> str:\n",
					"    \"\"\"\n",
					"\n",
					"    The purpose of this function is to create an external table definition string, using various table parameters.\n",
					"\n",
					"    Parameters:\n",
					"     1. recreate_external_tables (bool): Takes in the constant from (PARAM_RECREATE_EXTERNAL_TABLES)\n",
					"     2. database_name (str): Takes in the database name, derived from the tables JSON metadata\n",
					"     3. schema_name (str): Takes in the schema name, derived from the tables JSON metadata\n",
					"     4. table_name (str): Takes in the table name derived from the tables JSON metadata \n",
					"     5. file_system (str): Takes in the constant ADLS file system where the data is situated (PARAM_CONTAINER_NAME_ENRICHED)\n",
					"     6. data_source (str): Takes in the external_data_source_name variable, which is created in create_serverless_databases_and_schemas function\n",
					"     7. hierarchy (str): Takes in the file hierarchy in ADLS, derived from the tables JSON metadata\n",
					"     8. columns_meta (str): Takes in the tables columns metadata, derived from the JSON metadata\n",
					"\n",
					"    Output: A string matching exactly a CREATE EXTERNAL TABLE Serverless SQL query. It contains all the D365 tables information required to create the views, including a schema.\n",
					"\n",
					"    \"\"\"\n",
					"\n",
					"    if recreate_external_tables == True:\n",
					"        return f\"\"\"\n",
					"            USE [{database_name}];\n",
					"\n",
					"            IF EXISTS (select s.name as [SCHEMA_NAME],t.name AS [TABLE_NAME] from sys.tables t, sys.schemas s where t.schema_id = s.schema_id and s.name = '{schema_name}' and t.name = '{table_name}')\n",
					"                DROP EXTERNAL TABLE [{schema_name}].[{table_name}];\n",
					"\n",
					"            CREATE EXTERNAL TABLE [{schema_name}].[{table_name}](\n",
					"                {columns_meta},\n",
					"                etl_action varchar(5),\n",
					"                etl_timestamp datetime\n",
					"            )  \n",
					"            WITH (\n",
					"                LOCATION = '{location}',\n",
					"                DATA_SOURCE = [{data_source}],  \n",
					"                FILE_FORMAT = [exff_delta]\n",
					"            )\n",
					"        \"\"\"       \n",
					"    \n",
					"    else:\n",
					"        return f\"\"\"\n",
					"            USE [{database_name}];\n",
					"        \n",
					"            IF NOT EXISTS (select s.name as [SCHEMA_NAME],t.name AS [TABLE_NAME] from sys.tables t, sys.schemas s where t.schema_id = s.schema_id and s.name = '{schema_name}' and t.name = '{table_name}')\n",
					"                CREATE EXTERNAL TABLE [{schema_name}].[{table_name}](\n",
					"                    {columns_meta},\n",
					"                    etl_action varchar(5),\n",
					"                    etl_timestamp datetime\n",
					"                )  \n",
					"                WITH (\n",
					"                    LOCATION = '{location}',\n",
					"                    DATA_SOURCE = [{data_source}],  \n",
					"                    FILE_FORMAT = [exff_delta]\n",
					"                )\n",
					"        \"\"\"\n",
					" "
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def produce_external_table_definition_from_delta_schema(recreate_external_tables:bool, table_name: str, schema_name: str, database_name: str, location: str, data_source:str, data_lake:str,container_name:str) -> str:\n",
					"    \"\"\"\n",
					"    Generates a T-SQL CREATE EXTERNAL TABLE statement for a given PySpark DataFrame.\n",
					"\n",
					"    Args:\n",
					"        recreate_external_tables (bool): Takes in the constant from (PARAM_RECREATE_EXTERNAL_TABLES)\n",
					"        table_name (str): The name of the table to be created.\n",
					"        schema_name (str): The schema name in the SQL database.\n",
					"        database_name (str): The database name in the SQL database.\n",
					"        location (str): The location of the external data (e.g., Azure Data Lake Storage path).\n",
					"        data_source (str): The name of the external data source pointing to the right Storage Account & Container where the file exists.\n",
					"        data_lake (str): The name of the data lake where the files reside.\n",
					"        container_name (str): The name of the container within the data lake where the files reside.\n",
					"\n",
					"    Returns:\n",
					"        str: The T-SQL CREATE EXTERNAL TABLE statement.\n",
					"    \"\"\"\n",
					"    # Compose the full abfss file path fromthe container, data lake and exact location.\n",
					"    file_path = f'abfss://{container_name}@{data_lake}.dfs.core.windows.net/{location}'\n",
					"    # Read delta table to dataframe.\n",
					"    df = spark.read.format(\"delta\").load(file_path)\n",
					"\n",
					"    # Get the column names and data types from the DataFrame\n",
					"\n",
					"    columns = df.dtypes\n",
					"    column_definitions = []\n",
					"\n",
					"    for column_name, data_type in columns:\n",
					"        # Map PySpark data types to SQL data types\n",
					"        if data_type == 'string':\n",
					"            sql_data_type = 'VARCHAR(MAX)'\n",
					"        elif data_type == 'int':\n",
					"            sql_data_type = 'INT'\n",
					"        elif data_type == 'double':\n",
					"            sql_data_type = 'FLOAT'\n",
					"        elif data_type == 'boolean':\n",
					"            sql_data_type = 'BIT'\n",
					"        elif data_type == 'timestamp':\n",
					"            sql_data_type = 'DATETIME'\n",
					"        else:\n",
					"            sql_data_type = 'VARCHAR(MAX)'  # Default to VARCHAR(MAX) for unsupported types\n",
					"\n",
					"        # Append the column definition to the list\n",
					"        column_definitions.append(f\"[{column_name}] {sql_data_type}\")\n",
					"\n",
					"    # Join the column definitions into a single string\n",
					"    columns_sql = \",\\n    \".join(column_definitions)\n",
					"\n",
					"    # Create the T-SQL statement for creating the external table\n",
					"    if recreate_external_tables == True:\n",
					"        create_table_sql = f\"\"\"\n",
					"        USE [{database_name}];\n",
					"        IF EXISTS (select s.name as [SCHEMA_NAME],t.name AS [TABLE_NAME] from sys.tables t, sys.schemas s where t.schema_id = s.schema_id and s.name = '{schema_name}' and t.name = '{table_name}')\n",
					"            DROP EXTERNAL TABLE [{schema_name}].[{table_name}];\n",
					"\n",
					"        CREATE EXTERNAL TABLE [{schema_name}].[{table_name}] (\n",
					"            {columns_sql}\n",
					"        )\n",
					"        WITH (\n",
					"            LOCATION = '{location}',\n",
					"            DATA_SOURCE = [{data_source}],\n",
					"            FILE_FORMAT = [exff_delta]\n",
					"        );\n",
					"        \"\"\"\n",
					"    else:\n",
					"        create_table_sql = f\"\"\"\n",
					"        USE [{database_name}];\n",
					"        IF NOT EXISTS (select s.name as [SCHEMA_NAME],t.name AS [TABLE_NAME] from sys.tables t, sys.schemas s where t.schema_id = s.schema_id and s.name = '{schema_name}' and t.name = '{table_name}')\n",
					"            CREATE EXTERNAL TABLE [{schema_name}].[{table_name}] (\n",
					"                {columns_sql}\n",
					"            )\n",
					"            WITH (\n",
					"                LOCATION = '{location}',\n",
					"                DATA_SOURCE = [{data_source}],\n",
					"                FILE_FORMAT = [exff_delta]\n",
					"            );\n",
					"        \"\"\"\n",
					"\n",
					"\n",
					"    return create_table_sql"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# This function creates the external tables via JDBC driver, SQL injection.\n",
					"# The query that it injects is the output of the produceExternalTableDefinition function\n",
					"# primary\n",
					"def create_external_table(odbc_url:str, odbc_token:str, database_name:str, table_definition:str):\n",
					"    \"\"\"\n",
					"    The purpose of this function is to execute the query created before, against the Serverless SQL DB.\n",
					"\n",
					"    Parameters:\n",
					"     1. odbc_url (str): Takes in the url required for the odbc connection\n",
					"     2. odbc_token (str): Takes in the authentication token required for the odbc connection\n",
					"     4. database_name (str): Takes in the constant Serverless SQL DB (DATABASE_NAME_TO_CREATE)\n",
					"     5. table_definition (str): Takes in the result of the produceExternalTableDefinition function.\n",
					"\n",
					"    Output: Connects to the Serverless SQL DB through JDBC and injects the Queries produced using produceExternalTableDefinition function.\n",
					"\n",
					"    \"\"\"\n",
					"\n",
					"    d = pyodbc.connect(odbc_url, attrs_before = { SQL_COPT_SS_ACCESS_TOKEN:odbc_token })\n",
					"    cursor = d.cursor()\n",
					"    Query = table_definition\n",
					"    cursor.execute(Query)\n",
					"    d.commit() \n",
					"    d.close()"
				],
				"execution_count": null
			}
		]
	}
}