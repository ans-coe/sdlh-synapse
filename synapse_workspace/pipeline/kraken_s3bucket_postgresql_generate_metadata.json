{
	"name": "kraken_s3bucket_postgresql_generate_metadata",
	"properties": {
		"activities": [
			{
				"name": "for_each_table_metadata",
				"description": "This for loop iterates through the each required item and loads required metadata into the Metadata DB.  Tables included are ETL.SQLTableMetadata & ETL.SQLColumnMetadata & ETL.JsonMetadata",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "for_each_database_ingest_info_schema_columns",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('lookup_sql_etl_metadata').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "sql_etl_tables",
							"description": "Writes required config to ETL.SQLTableMetadata",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "lookup_new_columns",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "lookup_current_columns",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "SELECT '@{item().SOURCE_TYPE}' AS \"SOURCE_TYPE\",\n    '@{item().SOURCE_SYSTEM}' AS \"SOURCE_SYSTEM\",\n    @{item().SOURCE_GROUPING_ID} AS \"SOURCE_GROUPING_ID\",\n    '@{item().IS_ENABLED}' AS \"IS_ENABLED\",\n    '@{item().LOAD_TYPE}' AS \"LOAD_TYPE\",\n    '@{item().BATCH_FREQUENCY}' AS \"BATCH_FREQUENCY\",\n    '@{item().SOURCE_CONNECTION_STRING}' AS \"SOURCE_CONNECTION_STRING\",\n    '@{item().DATABASE_NAME}' AS \"DATABASE_NAME\",\n    '@{item().SCHEMA_NAME}' AS \"SCHEMA_NAME\",\n    '@{item().TABLE_NAME}' AS \"TABLE_NAME\",\n    '@{item().PRIMARY_KEYS}' AS \"PRIMARY_KEYS\",\n    '@{item().WATERMARK_COLUMN}' AS \"WATERMARK_COLUMN\",\n    '@{item().SERVERLESS_SQL_POOL_DATABASE}' AS \"SERVERLESS_SQL_POOL_DATABASE\",\n    '@{item().SERVERLESS_SQL_POOL_SCHEMA}' AS \"SERVERLESS_SQL_POOL_SCHEMA\",\n    NULL AS \"COLUMNS_LIST\",\n    NULL AS \"COLUMNS_META\",\n    NULL AS \"INFORMATION_SCHEMA\",\n    '@{item().CUSTOM_FIELD_1}' AS \"ETL_ACTION_COLUMN\"",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"sink": {
									"type": "AzureSqlSink",
									"writeBehavior": "upsert",
									"upsertSettings": {
										"useTempDB": true,
										"keys": [
											"SOURCE_TYPE",
											"SOURCE_SYSTEM",
											"DATABASE_NAME",
											"SCHEMA_NAME",
											"TABLE_NAME"
										]
									},
									"sqlWriterUseTableLock": false,
									"disableMetricsCollection": false
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "sdlh_azuresql_db_metadata",
									"type": "DatasetReference",
									"parameters": {
										"METADATA_TABLE_NAME": "na"
									}
								}
							],
							"outputs": [
								{
									"referenceName": "sdlh_azuresql_db_metadata",
									"type": "DatasetReference",
									"parameters": {
										"METADATA_TABLE_NAME": "SQLTableMetadata"
									}
								}
							]
						},
						{
							"name": "sql_etl_columns",
							"description": "Writes required config to ETL.SQLColumnMetadata",
							"type": "Copy",
							"state": "Inactive",
							"onInactiveMarkAs": "Succeeded",
							"dependsOn": [
								{
									"activity": "sql_update_column",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "SELECT '@{item().SOURCE_TYPE}' AS \"SOURCE_TYPE\"\n    ,'@{item().SOURCE_SYSTEM}' AS \"SOURCE_SYSTEM\"\n    ,CASE\n        WHEN COLUMN_NAME NOT IN (@{concat('''', replace(if(equals(item().COLUMNS_TO_EXCLUDE, null), '-1', item().COLUMNS_TO_EXCLUDE), ',' , ''','''), '''')}) THEN 1\n        ELSE 0\n    END AS \"IS_ENABLED\"\n    ,'@{item().DATABASE_NAME}' AS \"DATABASE_NAME\"\n    ,TABLE_SCHEMA AS \"SCHEMA_NAME\"\n    ,TABLE_NAME AS \"TABLE_NAME\"\n    ,COLUMN_NAME AS \"COLUMN_NAME\"\n    ,COLUMN_DEFAULT AS \"COLUMN_DEFAULT\"\n    ,IS_NULLABLE AS \"IS_NULLABLE\"\n    ,CASE\n        WHEN UPPER(DATA_TYPE) = 'DECIMAL' THEN CONCAT(DATA_TYPE, '(', NUMERIC_PRECISION, ',' , NUMERIC_SCALE, ')')\n        WHEN UPPER(DATA_TYPE) = 'NUMERIC' THEN CONCAT(DATA_TYPE, '(', NUMERIC_PRECISION, ',' , NUMERIC_SCALE, ')')\n        ELSE DATA_TYPE\n    END AS \"DATA_TYPE\"\n    ,CHARACTER_MAXIMUM_LENGTH AS \"CHARACTER_MAXIMUM_LENGTH\"\n    ,COLLATION_NAME AS \"COLLATION_NAME\"\nFROM ETL.KrakenInformationSchemaColumns\nWHERE TABLE_NAME = '@{item().TABLE_NAME}'\nAND TABLE_SCHEMA = '@{item().SCHEMA_NAME}'",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"sink": {
									"type": "AzureSqlSink",
									"writeBehavior": "upsert",
									"upsertSettings": {
										"useTempDB": true,
										"keys": [
											"SOURCE_TYPE",
											"SOURCE_SYSTEM",
											"DATABASE_NAME",
											"SCHEMA_NAME",
											"TABLE_NAME",
											"COLUMN_NAME"
										]
									},
									"sqlWriterUseTableLock": false,
									"disableMetricsCollection": false
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": true
									}
								}
							},
							"inputs": [
								{
									"referenceName": "sdlh_azuresql_db_metadata",
									"type": "DatasetReference",
									"parameters": {
										"METADATA_TABLE_NAME": "na"
									}
								}
							],
							"outputs": [
								{
									"referenceName": "sdlh_azuresql_db_metadata",
									"type": "DatasetReference",
									"parameters": {
										"METADATA_TABLE_NAME": "SQLColumnMetadata"
									}
								}
							]
						},
						{
							"name": "lookup_new_columns",
							"description": "Retrieves latest Table Column config from the source systems INFORMATION_SCHEMA to be used within the loop.",
							"type": "Lookup",
							"state": "Inactive",
							"onInactiveMarkAs": "Succeeded",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "WITH CTE_ALIAS AS (\nSELECT TABLE_NAME\n    ,REPLACE(COLUMN_NAME, '''', '''''') AS COLUMN_NAME\n    ,CHARACTER_MAXIMUM_LENGTH\n    ,CASE\n        WHEN UPPER(DATA_TYPE) = 'DECIMAL' THEN CONCAT(DATA_TYPE, '(', NUMERIC_PRECISION, ',' , NUMERIC_SCALE, ')')\n        WHEN UPPER(DATA_TYPE) = 'NUMERIC' THEN CONCAT(DATA_TYPE, '(', NUMERIC_PRECISION, ',' , NUMERIC_SCALE, ')')\n        ELSE DATA_TYPE\n    END AS DATA_TYPE\n    ,REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(RTRIM(LTRIM(LOWER(COLUMN_NAME))), ' ', '_'), ',', '_'), ';', '_'), '{', '_'), '}', '_'), '(', '_'), ')', '_'), '=', '_'), '''', '''''') AS COLUMN_ALIAS\nFROM ETL.KrakenInformationSchemaColumns\nWHERE TABLE_NAME = '@{item().TABLE_NAME}'\nAND TABLE_SCHEMA = '@{item().SCHEMA_NAME}'\nAND COLUMN_NAME NOT IN (@{concat('''', replace(if(equals(item().COLUMNS_TO_EXCLUDE, null), '-1', item().COLUMNS_TO_EXCLUDE), ',' , ''','''), '''')})),\n\ncte_col_with_alias AS (\nSELECT *\n    ,CONCAT('S.[',COLUMN_NAME,']', ' AS ' , '[', COLUMN_ALIAS,']') AS COLUMN_WITH_ALIAS\n    ,CASE\n        WHEN '@{item().LOAD_TYPE}' = 'CHANGE_TRACKING' AND COLUMN_NAME IN (@{concat('''', replace(if(equals(item().PRIMARY_KEYS, null), '-1', item().PRIMARY_KEYS), ',' , ''','''), '''')}) THEN CONCAT('CT.[',COLUMN_NAME,']', ' AS ' , '[', COLUMN_ALIAS,']')\n        WHEN '@{item().LOAD_TYPE}' = 'CHANGE_TRACKING' AND COLUMN_NAME NOT IN (@{concat('''', replace(if(equals(item().PRIMARY_KEYS, null), '-1', item().PRIMARY_KEYS), ',' , ''','''), '''')}) THEN CONCAT('S.[',COLUMN_NAME,']', ' AS ' , '[', COLUMN_ALIAS,']')\n        ELSE NULL\n    END AS COLUMN_WITH_ALIAS_CHANGE_TRACKING\nFROM CTE_ALIAS)\n\nSELECT\n    TABLE_NAME\n    ,REPLACE(REPLACE(REPLACE(STUFF((\n        SELECT ',' + CAST(COLUMN_WITH_ALIAS AS varchar(max))\n        FROM cte_col_with_alias AS innerTable\n        WHERE innerTable.TABLE_NAME = p.TABLE_NAME\n        FOR XML PATH('')\n        ),1,1,''), '&amp;', '&'), '&lt;', '<'), '&gt;', '>') AS COLUMNS_META\n    ,REPLACE(REPLACE(REPLACE(STUFF((\n        SELECT ',' + CAST(COLUMN_WITH_ALIAS_CHANGE_TRACKING AS varchar(max))\n        FROM cte_col_with_alias AS innerTable\n        WHERE innerTable.TABLE_NAME = p.TABLE_NAME\n        FOR XML PATH('')\n        ),1,1,''), '&amp;', '&'), '&lt;', '<'), '&gt;', '>') AS COLUMNS_META_CHANGE_TRACKING\n    ,REPLACE(REPLACE(REPLACE(STUFF((\n        SELECT ',' + CAST(COLUMN_NAME AS varchar(max))\n        FROM cte_col_with_alias AS innerTable\n        WHERE innerTable.TABLE_NAME = p.TABLE_NAME\n        FOR XML PATH('')\n        ),1,1,''), '&amp;', '&'), '&lt;', '<'), '&gt;', '>') AS COLUMNS_LIST\n    ,REPLACE(REPLACE(REPLACE(STUFF((\n        SELECT COLUMN_NAME,DATA_TYPE,CHARACTER_MAXIMUM_LENGTH\n        FROM cte_col_with_alias AS innerTable\n        WHERE innerTable.TABLE_NAME = p.TABLE_NAME\n        FOR XML PATH('')\n    ),1,0,''), '&amp;', '&'), '&lt;', ''), '&gt;', '') AS INFORMATION_SCHEMA\nFROM cte_col_with_alias AS p\nGROUP BY p.TABLE_NAME",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "sdlh_azuresql_db_metadata",
									"type": "DatasetReference",
									"parameters": {
										"METADATA_TABLE_NAME": "na"
									}
								},
								"firstRowOnly": true
							}
						},
						{
							"name": "generate_schema_version",
							"description": "Executes a stored procedure which completes any update to the SCHEMA_VERSION column in the table ETL.SQLTableMetadata",
							"type": "SqlServerStoredProcedure",
							"state": "Inactive",
							"onInactiveMarkAs": "Succeeded",
							"dependsOn": [
								{
									"activity": "sql_etl_columns",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[ETL].[usp_SQLGenerateSchemaVersion]",
								"storedProcedureParameters": {
									"PARAM_CHECK_INFORMATION_SCHEMA": {
										"value": {
											"value": "@activity('lookup_current_columns').output.firstRow.INFORMATION_SCHEMA",
											"type": "Expression"
										},
										"type": "String"
									},
									"PARAM_DATABASE_NAME": {
										"value": {
											"value": "@item().DATABASE_NAME",
											"type": "Expression"
										},
										"type": "String"
									},
									"PARAM_SCHEMA_NAME": {
										"value": {
											"value": "@item().SCHEMA_NAME",
											"type": "Expression"
										},
										"type": "String"
									},
									"PARAM_SOURCE_SYSTEM": {
										"value": {
											"value": "@item().SOURCE_SYSTEM",
											"type": "Expression"
										},
										"type": "String"
									},
									"PARAM_SOURCE_TYPE": {
										"value": {
											"value": "@item().SOURCE_TYPE",
											"type": "Expression"
										},
										"type": "String"
									},
									"PARAM_TABLE_NAME": {
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "azure_sql_data_no_param_azir",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "lookup_current_columns",
							"description": "Retrieves current Table Column config from the Metadata DB be used within the loop to compare with new Table Column config. ( MAX is used as a workaround for first load when there is no current config.  It returns as NULL instead of nothing )",
							"type": "Lookup",
							"state": "Inactive",
							"onInactiveMarkAs": "Succeeded",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "SELECT MAX([INFORMATION_SCHEMA]) AS [INFORMATION_SCHEMA]\nFROM [ETL].[SQLTableMetadata]\nWHERE [SOURCE_TYPE] = '@{item().SOURCE_TYPE}'\nAND [SOURCE_SYSTEM] = '@{item().SOURCE_SYSTEM}'\nAND [DATABASE_NAME] = '@{item().DATABASE_NAME}'\nAND [SCHEMA_NAME] = '@{item().SCHEMA_NAME}'\nAND [TABLE_NAME] = '@{item().TABLE_NAME}'\n",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "sdlh_azuresql_db_metadata",
									"type": "DatasetReference",
									"parameters": {
										"METADATA_TABLE_NAME": "NA"
									}
								},
								"firstRowOnly": true
							}
						},
						{
							"name": "create_log_entry_generate_sql_tables",
							"description": "This lookup runs a stored procedure which generates a log entry in the ETL.Log table.",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "sql_etl_tables",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderStoredProcedureName": "[ETL].[usp_InsertLog]",
									"storedProcedureParameters": {
										"SOURCE_TYPE": {
											"type": "String",
											"value": {
												"value": "@pipeline().parameters.PARAM_SOURCE_TYPE",
												"type": "Expression"
											}
										},
										"SOURCE_SYSTEM": {
											"type": "String",
											"value": {
												"value": "@pipeline().parameters.PARAM_SOURCE_SYSTEM",
												"type": "Expression"
											}
										},
										"SOURCE_GROUPING_ID": {
											"type": "Int32",
											"value": null
										},
										"OBJECT_NAME": {
											"type": "String",
											"value": {
												"value": "@toLower(replace(concat(pipeline().parameters.PARAM_SOURCE_TYPE,'_',pipeline().parameters.PARAM_SOURCE_SYSTEM,'_',item().DATABASE_NAME,'_',item().SCHEMA_NAME,'_',item().TABLE_NAME),' ', ''))",
												"type": "Expression"
											}
										},
										"DATABASE_NAME": {
											"type": "String",
											"value": {
												"value": "@item().DATABASE_NAME",
												"type": "Expression"
											}
										},
										"SCHEMA_NAME": {
											"type": "String",
											"value": {
												"value": "@item().SCHEMA_NAME",
												"type": "Expression"
											}
										},
										"TABLE_NAME": {
											"type": "String",
											"value": {
												"value": "@item().TABLE_NAME",
												"type": "Expression"
											}
										},
										"TRIGGER_TIME": {
											"type": "DateTime",
											"value": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											}
										},
										"TRIGGER_TYPE": {
											"type": "String",
											"value": {
												"value": "@pipeline().TriggerType",
												"type": "Expression"
											}
										},
										"PIPELINE_RUN_ID": {
											"type": "String",
											"value": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											}
										},
										"PIPELINE_NAME": {
											"type": "String",
											"value": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											}
										},
										"TRIGGERING_PIPELINE_RUN_ID": {
											"type": "String",
											"value": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											}
										},
										"TRIGGERING_PIPELINE_NAME": {
											"type": "String",
											"value": {
												"value": "@pipeline()?.TriggeredByPipelineName",
												"type": "Expression"
											}
										},
										"OPERATION": {
											"type": "String",
											"value": "Copy Activity"
										},
										"COMPONENT_NAME": {
											"type": "String",
											"value": "kraken_s3bucket_postgresql_generate_metadata"
										},
										"TARGET_SYSTEM": {
											"type": "String",
											"value": "Metadata DB"
										},
										"START_TIME": {
											"type": "DateTime",
											"value": {
												"value": "@utcnow()",
												"type": "Expression"
											}
										},
										"END_TIME": {
											"type": "DateTime",
											"value": {
												"value": "@utcnow()",
												"type": "Expression"
											}
										},
										"DURATION_SECONDS": {
											"type": "Int32",
											"value": {
												"value": "@activity('sql_etl_tables').output.copyDuration",
												"type": "Expression"
											}
										},
										"INSERTS": {
											"type": "Int32",
											"value": {
												"value": "@activity('sql_etl_tables').output.rowsCopied",
												"type": "Expression"
											}
										},
										"UPDATES": {
											"type": "Int32",
											"value": null
										},
										"DELETES": {
											"type": "Int32",
											"value": null
										},
										"ERROR_MESSAGE": {
											"type": "String",
											"value": null
										},
										"NEW_INCREMENTAL_KEY_VALUE": {
											"type": "String",
											"value": null
										},
										"PREVIOUS_INCREMENTAL_KEY_VALUE": {
											"type": "String",
											"value": null
										}
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "sdlh_azuresql_db_metadata",
									"type": "DatasetReference",
									"parameters": {
										"METADATA_TABLE_NAME": "NA"
									}
								},
								"firstRowOnly": false
							}
						},
						{
							"name": "create_log_entry_generate_sql_columns",
							"description": "This lookup runs a stored procedure which generates a log entry in the ETL.Log table.",
							"type": "Lookup",
							"state": "Inactive",
							"onInactiveMarkAs": "Succeeded",
							"dependsOn": [
								{
									"activity": "sql_etl_columns",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderStoredProcedureName": "[ETL].[usp_InsertLog]",
									"storedProcedureParameters": {
										"SOURCE_TYPE": {
											"type": "String",
											"value": {
												"value": "@pipeline().parameters.PARAM_SOURCE_TYPE",
												"type": "Expression"
											}
										},
										"SOURCE_SYSTEM": {
											"type": "String",
											"value": {
												"value": "@pipeline().parameters.PARAM_SOURCE_SYSTEM",
												"type": "Expression"
											}
										},
										"SOURCE_GROUPING_ID": {
											"type": "Int32",
											"value": null
										},
										"OBJECT_NAME": {
											"type": "String",
											"value": {
												"value": "@toLower(replace(concat(pipeline().parameters.PARAM_SOURCE_TYPE,'_',pipeline().parameters.PARAM_SOURCE_SYSTEM,'_',item().DATABASE_NAME,'_',item().SCHEMA_NAME,'_',item().TABLE_NAME),' ', ''))",
												"type": "Expression"
											}
										},
										"DATABASE_NAME": {
											"type": "String",
											"value": {
												"value": "@item().DATABASE_NAME",
												"type": "Expression"
											}
										},
										"SCHEMA_NAME": {
											"type": "String",
											"value": {
												"value": "@item().SCHEMA_NAME",
												"type": "Expression"
											}
										},
										"TABLE_NAME": {
											"type": "String",
											"value": {
												"value": "@item().TABLE_NAME",
												"type": "Expression"
											}
										},
										"TRIGGER_TIME": {
											"type": "DateTime",
											"value": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											}
										},
										"TRIGGER_TYPE": {
											"type": "String",
											"value": {
												"value": "@pipeline().TriggerType",
												"type": "Expression"
											}
										},
										"PIPELINE_RUN_ID": {
											"type": "String",
											"value": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											}
										},
										"PIPELINE_NAME": {
											"type": "String",
											"value": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											}
										},
										"TRIGGERING_PIPELINE_RUN_ID": {
											"type": "String",
											"value": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											}
										},
										"TRIGGERING_PIPELINE_NAME": {
											"type": "String",
											"value": {
												"value": "@pipeline()?.TriggeredByPipelineName",
												"type": "Expression"
											}
										},
										"OPERATION": {
											"type": "String",
											"value": "Copy Activity"
										},
										"COMPONENT_NAME": {
											"type": "String",
											"value": "kraken_s3bucket_postgresql_generate_metadata"
										},
										"TARGET_SYSTEM": {
											"type": "String",
											"value": "Metadata DB"
										},
										"START_TIME": {
											"type": "DateTime",
											"value": {
												"value": "@utcnow()",
												"type": "Expression"
											}
										},
										"END_TIME": {
											"type": "DateTime",
											"value": {
												"value": "@utcnow()",
												"type": "Expression"
											}
										},
										"DURATION_SECONDS": {
											"type": "Int32",
											"value": {
												"value": "@activity('sql_etl_tables').output.copyDuration",
												"type": "Expression"
											}
										},
										"INSERTS": {
											"type": "Int32",
											"value": {
												"value": "@activity('sql_etl_tables').output.rowsCopied",
												"type": "Expression"
											}
										},
										"UPDATES": {
											"type": "Int32",
											"value": null
										},
										"DELETES": {
											"type": "Int32",
											"value": null
										},
										"ERROR_MESSAGE": {
											"type": "String",
											"value": null
										},
										"NEW_INCREMENTAL_KEY_VALUE": {
											"type": "String",
											"value": null
										},
										"PREVIOUS_INCREMENTAL_KEY_VALUE": {
											"type": "String",
											"value": null
										}
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "sdlh_azuresql_db_metadata",
									"type": "DatasetReference",
									"parameters": {
										"METADATA_TABLE_NAME": "NA"
									}
								},
								"firstRowOnly": false
							}
						},
						{
							"name": "sql_update_column",
							"description": "This step is required to disable any columns that have been deleted from the source system since last run",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "sql_etl_tables",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[ETL].[usp_SQLUpdateColumns]",
								"storedProcedureParameters": {
									"PARAM_DATABASE_NAME": {
										"value": {
											"value": "@item().DATABASE_NAME",
											"type": "Expression"
										},
										"type": "String"
									},
									"PARAM_SCHEMA_NAME": {
										"value": {
											"value": "@item().SCHEMA_NAME",
											"type": "Expression"
										},
										"type": "String"
									},
									"PARAM_SOURCE_SYSTEM": {
										"value": {
											"value": "@item().SOURCE_SYSTEM",
											"type": "Expression"
										},
										"type": "String"
									},
									"PARAM_SOURCE_TYPE": {
										"value": {
											"value": "@item().SOURCE_TYPE",
											"type": "Expression"
										},
										"type": "String"
									},
									"PARAM_TABLE_NAME": {
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "azure_sql_data_no_param_azir",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "map_pgsql_datatypes_to_serverless",
							"description": "Executes a stored procedure which completes a datatype mapping of the metadata, specifically around PgSQL datatype mapping to Serverless SQL Pool.",
							"type": "SqlServerStoredProcedure",
							"state": "Inactive",
							"onInactiveMarkAs": "Succeeded",
							"dependsOn": [
								{
									"activity": "sql_etl_columns",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[ETL].[usp_PGSQLMapColumnMetadata]",
								"storedProcedureParameters": {
									"PARAM_DATABASE_NAME": {
										"value": {
											"value": "@item().DATABASE_NAME",
											"type": "Expression"
										},
										"type": "String"
									},
									"PARAM_SCHEMA_NAME": {
										"value": {
											"value": "@item().SCHEMA_NAME",
											"type": "Expression"
										},
										"type": "String"
									},
									"PARAM_SOURCE_SYSTEM": {
										"value": {
											"value": "@item().SOURCE_SYSTEM",
											"type": "Expression"
										},
										"type": "String"
									},
									"PARAM_SOURCE_TYPE": {
										"value": {
											"value": "@item().SOURCE_TYPE",
											"type": "Expression"
										},
										"type": "String"
									},
									"PARAM_TABLE_NAME": {
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "azure_sql_data_no_param_azir",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "set_schema_version_to_zero",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "generate_schema_version",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "UPDATE ETL.SQLTableMetadata\nSET SCHEMA_VERSION = 0\nWHERE TABLE_NAME = '@{item().TABLE_NAME}'\nAND SCHEMA_NAME = '@{item().SCHEMA_NAME}'\nAND SOURCE_SYSTEM = '@{item().SOURCE_SYSTEM}'\nAND SOURCE_TYPE =  '@{item().SOURCE_TYPE}'\n\nSELECT TOP (1) * FROM ETL.SQLTableMetadata \nWHERE TABLE_NAME = '@{item().TABLE_NAME}'\nAND SCHEMA_NAME = '@{item().SCHEMA_NAME}'\nAND SOURCE_SYSTEM = '@{item().SOURCE_SYSTEM}'\nAND SOURCE_TYPE =  '@{item().SOURCE_TYPE}'",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "sdlh_azuresql_db_metadata",
									"type": "DatasetReference",
									"parameters": {
										"METADATA_TABLE_NAME": "na"
									}
								},
								"firstRowOnly": false
							}
						}
					]
				}
			},
			{
				"name": "lookup_sql_etl_metadata",
				"description": "Runs a query on Metadata DB to retrieve required items for supplied SOURCE_TYPE & SOURCE_SYSTEM",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "sdlh_base_generate_metadata",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "SELECT *\nFROM ETL.BaseMetadata\nWHERE SOURCE_TYPE = '@{pipeline().parameters.PARAM_SOURCE_TYPE}'\nAND SOURCE_SYSTEM = '@{pipeline().parameters.PARAM_SOURCE_SYSTEM}'\nAND SOURCE_GROUPING_ID BETWEEN @{pipeline().parameters.PARAM_SOURCE_GROUPING_ID_START} AND @{pipeline().parameters.PARAM_SOURCE_GROUPING_ID_END}",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "sdlh_azuresql_db_metadata",
						"type": "DatasetReference",
						"parameters": {
							"METADATA_TABLE_NAME": "BaseMetadata"
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "generate_json_metadata",
				"description": "Executes a stored procedure which checks if any updates are required to table ETL.JsonMetadata",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "for_each_table_metadata",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[ETL].[usp_KrakenS3GenerateJsonMetadata]",
					"storedProcedureParameters": {
						"PARAM_SOURCE_SYSTEM": {
							"value": {
								"value": "@pipeline().parameters.PARAM_SOURCE_SYSTEM",
								"type": "Expression"
							},
							"type": "String"
						},
						"PARAM_SOURCE_TYPE": {
							"value": {
								"value": "@pipeline().parameters.PARAM_SOURCE_TYPE",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "azure_sql_data_no_param_azir",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "sdlh_base_generate_metadata",
				"type": "ExecutePipeline",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "sdlh_base_generate_metadata",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true
				}
			},
			{
				"name": "lookup_kraken_databases_for_schema_ingestion",
				"description": "Runs a query on Metadata DB to retrieve required items for supplied SOURCE_TYPE & SOURCE_SYSTEM",
				"type": "Lookup",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "lookup_sql_etl_metadata",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "SELECT distinct DATABASE_NAME\nFROM ETL.BaseMetadata\nWHERE SOURCE_TYPE = '@{pipeline().parameters.PARAM_SOURCE_TYPE}'\nAND SOURCE_SYSTEM = '@{pipeline().parameters.PARAM_SOURCE_SYSTEM}'\nAND SOURCE_GROUPING_ID BETWEEN @{pipeline().parameters.PARAM_SOURCE_GROUPING_ID_START} AND @{pipeline().parameters.PARAM_SOURCE_GROUPING_ID_END}",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "sdlh_azuresql_db_metadata",
						"type": "DatasetReference",
						"parameters": {
							"METADATA_TABLE_NAME": "BaseMetadata"
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "for_each_database_ingest_info_schema_columns",
				"description": "For each Kraken database that resides in S3 bucket, ingest its schema from ADLS into ETL.KrakenInformationSchemaColumns.",
				"type": "ForEach",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "lookup_kraken_databases_for_schema_ingestion",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('lookup_kraken_databases_for_schema_ingestion').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "copy_kraken_information_schema_columns_to_metadata_db",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "DelimitedTextSource",
									"storeSettings": {
										"type": "AzureBlobFSReadSettings",
										"recursive": true,
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "DelimitedTextReadSettings"
									}
								},
								"sink": {
									"type": "AzureSqlSink",
									"writeBehavior": "upsert",
									"upsertSettings": {
										"useTempDB": true,
										"keys": [
											"SOURCE_TYPE",
											"SOURCE_SYSTEM",
											"TABLE_CATALOG",
											"TABLE_SCHEMA",
											"TABLE_NAME",
											"COLUMN_NAME"
										]
									},
									"sqlWriterUseTableLock": false,
									"disableMetricsCollection": false
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "sdlh_gen2_csv_comma",
									"type": "DatasetReference",
									"parameters": {
										"FILE_SYSTEM": "metadata",
										"DIRECTORY": {
											"value": "@concat('kraken_information_schema/', item().DATABASE_NAME)",
											"type": "Expression"
										},
										"FILE_NAME": "information_schema_columns.csv"
									}
								}
							],
							"outputs": [
								{
									"referenceName": "sdlh_azuresql_db_metadata",
									"type": "DatasetReference",
									"parameters": {
										"METADATA_TABLE_NAME": "KrakenInformationSchemaColumns"
									}
								}
							]
						}
					]
				}
			}
		],
		"concurrency": 50,
		"parameters": {
			"PARAM_SOURCE_TYPE": {
				"type": "string",
				"defaultValue": "S3_BUCKET"
			},
			"PARAM_SOURCE_SYSTEM": {
				"type": "string",
				"defaultValue": "KRAKEN_S3_BUCKET"
			},
			"PARAM_SOURCE_GROUPING_ID_START": {
				"type": "string",
				"defaultValue": "1"
			},
			"PARAM_SOURCE_GROUPING_ID_END": {
				"type": "string",
				"defaultValue": "100"
			}
		},
		"folder": {
			"name": "SDLH/S3_Bucket"
		},
		"annotations": [],
		"lastPublishTime": "2023-07-25T15:14:09Z"
	}
}